<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">

    
  <!-- Spot Style - Default Point Spot Style -->


  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_image_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="18"
         framewidth="66"
         frameheight="66"
         stopspotsequence="false"
         crop="0|0|66|66"
         edge="center"
         zoom="true"

         alpha="0.8"
         onloaded="startspotanimation(0.1);if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););"
         onhover="onhoverIconDefaultPointSpotStyle"
         onover="onoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"

         height="25"
         width="25"
         />
  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>
  <action name="onoverIconDefaultPointSpotStyle">
tween(scale, 1.2);
tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();
    tween(scale, 1);
    tween(alpha, 0.8);
resumeautorotation(forcehotspot);

  </action>



        
  <!-- Video Spot Style - Default Video Spot Style -->
  <style name="RectVideoDefaultVideoSpotStyleLoader" url="%FIRSTXML%/spots/loadanimation.png" crop="0|0|64|64" ypos="0" frame="0" distorted="true" visible="false" />
  <style name="RectVideoDefaultVideoSpotStyle"
         capture="false"
         visible="false"
         distorted="true"
         scale="1.0"
         url.flash="%SWFPATH%/graphics/videoplayer.swf"
         url.html5="%FIRSTXML%/graphics/videoplayer.js"
         loop="true"
         autoresume="true"
         pausedonstart="true"
         pausedonstart.android="false"
         pauseothersounds="false"
         canstart="false"
         onhover="onhoverRectVideoDefaultVideoSpotStyle"
         onover="onoverRectVideoDefaultVideoSpotStyle"
         onout="onoutRectVideoDefaultVideoSpotStyle"
         onvideoready="onvideoreadyRectVideoDefaultVideoSpotStyle"
         />
  <style name="RectVideoDefaultVideoSpotStyle" 
    directionalsound="true" 
    range="90" 
    devices="flash" 
  />
  <style name="RectVideoDefaultVideoSpotStyle" 
    directionalsound="false" 
    devices="html5" 
  />
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startplaying" devices="no-ios"/>
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startpaused"  devices="ios"   />
  <style name="RectVideoDefaultVideoSpotStyle" stateVideo="startplaying" devices="ios10" />
  <action name="onhoverRectVideoDefaultVideoSpotStyle">
    showTooltip('hotspot');
  </action>
  <action name="onoverRectVideoDefaultVideoSpotStyle">pauseautorotation(forcehotspot);

  </action>
  <action name="onoutRectVideoDefaultVideoSpotStyle">
    hideTooltip();resumeautorotation(forcehotspot);

  </action>
  <action name="onvideoreadyRectVideoDefaultVideoSpotStyle">
    set(isVideoReadyForPlaying, false);
    if (isvideoready,
      if(panovideospotsstate,set(canstart, true););
      if (canstart,
        set(isVideoReadyForPlaying, true);
      );
    );
    if(isVideoReadyForPlaying,

    if(tour_displayspots,
      if(ispaused,
        if(stateVideo == "startplaying",
          set(stateVideo, "playing");
          play();
        );
      );
    );
    if(device.flash OR (device.webgl AND !device.ios),
      if (tour_soundson,
        div(volume, tour_soundsvolume, 100);
      ,
        set(volume, 0);
      );
    ,
      ifnot(device.ios,
        if (tour_soundson,
          js(kpanotour.Sounds.startVideosSounds(get(volume)));
        ,
          js(kpanotour.Sounds.stopVideosSounds());
        );
      );
    );
    onvideoreadyspecific();
    ,

      delayedcall(0.5,onvideoreadyRectVideoDefaultVideoSpotStyle());
    );
  </action>
  <action name="animatevideospotloaderRectVideoDefaultVideoSpotStyle">
    if(hotspot[%1],
      if(hotspot[%1].activated,
        set(hotspot[%1].visible, true);
      );
      inc(hotspot[%1].frame,1, 11,0);
      mul(hotspot[%1].ypos, hotspot[%1].frame, 64);
      txtadd(hotspot[%1].crop, '0|', get(hotspot[%1].ypos),'|64|64');
      delayedcall(%2, 0.1, animatevideospotloaderRectVideoDefaultVideoSpotStyle(%1, %2) );
    ,
      stopdelayedcall(%2);
    );
  </action>
  <action name="stopvideospotloaderanimationRectVideoDefaultVideoSpotStyle">
    removehotspot(%1);
  </action>



  <!-- ************* -->
  <!-- Panorama Menu -->
  <!-- ************* -->

<ptplugin name="panoramaMenu" engine="kolorMenu">
	<settings>
		<option name="position" value="bottomleft" type="string" />
		<option name="orientation" value="horizontal" type="string" />
		<option name="sub_orientation" value="vertical" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="5" type="int" />
		<option name="background_color" value="cfcfcf" type="string" />
		<option name="background_alpha" value="0.83137254901960789" type="float" />
		<option name="item_spacer" value="5" type="int" />
		<option name="border_radius" value="7" type="int" />
		<option name="full_size" value="false" type="bool" />
		<option name="use_out_effect" value="true" type="bool" />
		<option name="item_out_border_radius" value="7" type="int" />
		<option name="item_hover_border_radius" value="7" type="int" />
		<option name="item_out_border_width" value="0" type="int" />
		<option name="item_hover_border_width" value="0" type="int" />
		<option name="item_out_bg_color" value="cfcfcf" type="string" />
		<option name="item_out_bg_alpha" value="0.83137254901960789" type="float" />
		<option name="item_out_font_color" value="ffffff" type="string" />
		<option name="item_out_font_family" value="Arial" type="string" />
		<option name="item_out_font_size" value="18" type="int" />
		<option name="item_out_font_weight" value="normal" type="string" />
		<option name="item_out_font_style" value="normal" type="string" />
		<option name="item_out_font_decoration" value="normal" type="string" />
		<option name="use_hover_effect" value="true" type="bool" />
		<option name="item_hover_bg_color" value="f9f9f9" type="string" />
		<option name="item_hover_bg_alpha" value="0.83137254901960789" type="float" />
		<option name="item_hover_font_color" value="ffffff" type="string" />
		<option name="item_hover_font_family" value="Arial" type="string" />
		<option name="item_hover_font_size" value="18" type="int" />
		<option name="item_hover_font_weight" value="normal" type="string" />
		<option name="item_hover_font_style" value="normal" type="string" />
		<option name="item_hover_font_decoration" value="normal" type="string" />
		<option name="padding_main" value="10" type="int" />
		<option name="padding_sub" value="10" type="int" />
		<option name="item_selected_color" value="b3b3b3" type="string" />
		<option name="item_selected_alpha" value="0.36470588235294116" type="float" />
		
		<option name="item_selected_hover_color" value="d7d7d7" type="string" />
		<option name="item_selected_hover_alpha" value="0.36470588235294116" type="float" />
		
		<option name="item_selected_font_color" value="ffffff" type="string" />
		<option name="open_callback" value="invokeKrFunction('changeSelectedItem_panoramaMenu');" type="string" />
		<option name="text_align" value="right" type="string" />
		<option name="item_thumb_max_width" value="100" type="int" />
		<option name="item_thumb_max_height" value="50" type="int" />
		
		<option name="zorder" value="1" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
				<group name="group_1"
						titleID="panogroup153_title"
						thumbnail=""
						subMenu="true"
						cssClass="panogroup153"> 

				
				
						<item name="group_1_item_1"
							action="invokeKrFunction('mainloadscene', 'pano180')"
								titleID="pano180_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/arrivee_parking_coll_180/thumbnail.jpg"
							cssClass="pano180">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_2"
							action="invokeKrFunction('mainloadscene', 'pano59')"
								titleID="pano59_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/forum_59/thumbnail.jpg"
							cssClass="pano59">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_3"
							action="invokeKrFunction('mainloadscene', 'pano14')"
								titleID="pano14_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/kiosque_14/thumbnail.jpg"
							cssClass="pano14">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_4"
							action="invokeKrFunction('mainloadscene', 'pano20')"
								titleID="pano20_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/bibliotheque_copie_20/thumbnail.jpg"
							cssClass="pano20">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_5"
							action="invokeKrFunction('mainloadscene', 'pano46')"
								titleID="pano46_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/salle_audio_46/thumbnail.jpg"
							cssClass="pano46">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_6"
							action="invokeKrFunction('mainloadscene', 'pano229')"
								titleID="pano229_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/local_science_bas_229/thumbnail.jpg"
							cssClass="pano229">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_7"
							action="invokeKrFunction('mainloadscene', 'pano54')"
								titleID="pano54_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/salle_informatique_54/thumbnail.jpg"
							cssClass="pano54">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_8"
							action="invokeKrFunction('mainloadscene', 'pano56')"
								titleID="pano56_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/centre_des_4eme_56/thumbnail.jpg"
							cssClass="pano56">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_9"
							action="invokeKrFunction('mainloadscene', 'pano208')"
								titleID="pano208_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/local_science_haut_208/thumbnail.jpg"
							cssClass="pano208">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_10"
							action="invokeKrFunction('mainloadscene', 'pano178')"
								titleID="pano178_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/chapelle_178/thumbnail.jpg"
							cssClass="pano178">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_11"
							action="invokeKrFunction('mainloadscene', 'pano231')"
								titleID="pano231_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/salle_d_etude_231/thumbnail.jpg"
							cssClass="pano231">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_12"
							action="invokeKrFunction('mainloadscene', 'pano10')"
								titleID="pano10_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/centre_3eme_10/thumbnail.jpg"
							cssClass="pano10">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_13"
							action="invokeKrFunction('mainloadscene', 'pano44')"
								titleID="pano44_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/terrains_basket_44/thumbnail.jpg"
							cssClass="pano44">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_14"
							action="invokeKrFunction('mainloadscene', 'pano12')"
								titleID="pano12_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/salle_de_sport_12/thumbnail.jpg"
							cssClass="pano12">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_15"
							action="invokeKrFunction('mainloadscene', 'pano58')"
								titleID="pano58_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/batiment_1ere_58/thumbnail.jpg"
							cssClass="pano58">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_16"
							action="invokeKrFunction('mainloadscene', 'pano50')"
								titleID="pano50_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/baie_premieres_50/thumbnail.jpg"
							cssClass="pano50">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
						<item name="group_1_item_17"
							action="invokeKrFunction('mainloadscene', 'pano206')"
								titleID="pano206_title"
								thumbnail="Visite virtuelle college notre dame de la paixdata/classe_1ere_206/thumbnail.jpg"
							cssClass="pano206">
						
								<option name="item_out_bg_color" value="8c8c8c" type="string" />
								<option name="item_out_bg_alpha" value="1" type="float" />
								<option name="item_hover_bg_color" value="a8a8a8" type="string" />
								<option name="item_hover_bg_alpha" value="1" type="float" />
						
						</item>
					
						<option name="background_color" value="8c8c8c" type="string" />
						<option name="background_alpha" value="1" type="float" />
					
				</group>
	</internaldata>
</ptplugin>

<action name="kolorMenuJsReady_panoramaMenu">
	set(ptplugin[panoramaMenu].jsready, true);
</action>

<action name="showKolorMenu_panoramaMenu">
	
	ifnot(ptplugin[panoramaMenu].isOpen,
		stopdelayedcall(delay_panoramaMenu);
		set(ptplugin[panoramaMenu].isOpen, true);
		set(ptplugin[panoramaMenu].displayed, true);
		js(openKolorMenu(panoramaMenu));
	,
		if(ptplugin[panoramaMenu].jsready,
			stopdelayedcall(delay_panoramaMenu);
			set(ptplugin[panoramaMenu].displayed, true);
			js(invokePluginFunction(panoramaMenu, showKolorMenu));
		,
			delayedcall(delay_panoramaMenu, 0.1, showKolorMenu_panoramaMenu(););
		);
	);
</action>

<action name="hideKolorMenu_panoramaMenu">
	if(ptplugin[panoramaMenu].jsready,
		stopdelayedcall(delay_panoramaMenu);
		set(ptplugin[panoramaMenu].displayed, false);
		js(invokePluginFunction(panoramaMenu, hideKolorMenu));
	,
		delayedcall(delay_panoramaMenu, 0.1, hideKolorMenu_panoramaMenu(););
	);
</action>

<action name="changeSelectedItem_panoramaMenu">
	js(invokePluginFunction(panoramaMenu, changeSelectedItem, get(xml.scene)));
</action>

<action name="changeLanguage_panoramaMenu">
	if(ptplugin[panoramaMenu].jsready,
		stopdelayedcall(delay_panoramaMenu);
		js(invokePluginFunction(panoramaMenu, changeLanguage));
	,
		delayedcall(delay_panoramaMenu, 0.1, changeLanguage_panoramaMenu(););
	);
</action>


<events name="kolorMenuEvents_panoramaMenu" 
	keep="true"
	
	
	onTourStart="showKolorMenu_panoramaMenu();"
	onnewpano="changeSelectedItem_panoramaMenu();"
	changetourlanguage="changeLanguage_panoramaMenu"
/>

<!-- ********** -->
<!-- Barre de contrôle classique -->
<!-- id : controlBar_classic -->
<!-- ********** -->

  <krpano controlBar_classicbarbuilt="false" controlBar_classicbackgroundwidthwhenclosed="0" controlBar_classicbackgroundwidthwhenopened="0" controlBar_classicIsOpened="false" />
  <events name="controlBar_classicevents" 
    onxmlcomplete="controlBar_classicbuildMenuBar();" 


    keep="true" />



  <action name="controlBar_classicbuildMenuBar">
    ifnot (controlBar_classicbarbuilt, controlBar_classicbuildMenu(); set(controlBar_classicbarbuilt, true););
  </action>

  <action name="controlBar_classicbuildMenu">
    
    set(controlBar_classicbutton_pos, 20);

    set(layer[controlBar_classicbtn_hidecontrols].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_showcontrols].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);
    add(controlBar_classicbackgroundwidthwhenclosed, get(controlBar_classicbutton_pos), 20);





    set(layer[controlBar_classicbtn_autorotate_on ].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_autorotate_off].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);


    set(layer[controlBar_classicbtn_sound_on ].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_sound_off].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);






    if (device.desktop,
        set(layer[controlBar_classicbtn_right].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
        set(layer[controlBar_classicbtn_left].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
    );
    if (device.desktop,
        set(layer[controlBar_classicbtn_down].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
        set(layer[controlBar_classicbtn_up].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
    );
    if (device.desktop,
        set(layer[controlBar_classicbtn_out].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
        set(layer[controlBar_classicbtn_in].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
    );


    inc(controlBar_classicbutton_pos, 20);

    set(controlBar_classicbackgroundwidthwhenopened, get(controlBar_classicbutton_pos));



    
    add(controlBar_classicVerifyVisibility, 20, 20);
    if(controlBar_classicbackgroundwidthwhenopened == controlBar_classicVerifyVisibility,
      set(controlBar_classicbackgroundwidthwhenopened, 0);


    );

	
	
  </action>

	<events name="controlBar_classicStartTourEvents" onTourStart="controlBar_classicCallOnStartTour();" keep="true" />

	<action name="controlBar_classicCallOnStartTour">
		
		set(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbutton_pos));
		set(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbutton_pos));
		controlBar_classicshowMenuControls();
	</action>



  <style name="controlBar_classic_btn_style"
         keep="true"
         alpha="0.8"
         edge="right" align="right"
         width="36" height="36"
         zorder="4"
         onover="controlBar_classicctrlbaronoveraction();"
         onout="controlBar_classicctrlbaronoutaction();"
         onhover="showTooltip('plugin', controlBar_classicmenuTooltipStyle, bottom);"
         />
  <action name="controlBar_classicctrlbaronoveraction">
    tween(alpha,1,0.1,easeoutquad);
    tween(y,-2,0.1,easeoutquad);
  </action>  
  <action name="controlBar_classicctrlbaronoutaction">
    tween(alpha,0.8);
    tween(y,0,0.1,easeoutquad);
    hideTooltip();
  </action>

  <layer name="controlBar_classicmenu_controlbar_bg_img"
         keep="true"
         align="bottom"
         x="0" y="10"
         url="%FIRSTXML%/graphics/classiccontrolbar/footer.png"
         zorder="2"
         width="40"
         height="40"
         scale9grid="10|10|80|80"
         visible="false"
         />
  <layer name="controlBar_classicmenu_controlbar_bg"
         keep="true"
         align="bottom"
         x="0" y="10"
         type="container"
         zorder="3"
         width="40"
         height="40"
         visible="false"
         alpha="1.0"
         >



    <layer name="controlBar_classicbtn_in"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_in.png"
            ondown="viewControlZoomIn(false);"
            onup="viewControlZoomStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classiczoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_classicbtn_out"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_out.png"
            ondown="viewControlZoomOut(false);
"
            onup="viewControlZoomStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classiczoomOutTip"
            devices="desktop"
            visible="false"
            />

    <layer name="controlBar_classicbtn_left"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_left.png"
            ondown="viewControlMoveLeft(false);
"
            onup="viewControlMoveHoriStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classicmoveLeftTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_classicbtn_right"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_right.png"
            ondown="viewControlMoveRight(false);
"
            onup="viewControlMoveHoriStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classicmoveRightTip"
            devices="desktop"
            visible="false"
            />

    <layer name="controlBar_classicbtn_up"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_up.png"
            ondown="viewControlMoveUp(false);
"
            onup="viewControlMoveVertStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classicmoveUpTip"
            devices="desktop"
            visible="false"
            />
    <layer name="controlBar_classicbtn_down"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_down.png"
            ondown="viewControlMoveDown(false);
"
            onup="viewControlMoveVertStop();
"
            style="controlBar_classic_btn_style"
            tooltip="controlBar_classicmoveDownTip"
            devices="desktop"
            visible="false"
            />


    <layer name="controlBar_classicbtn_sound_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_sound.png"
            onclick="playTourSounds();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicsoundsOnTip"
            />
    <layer name="controlBar_classicbtn_sound_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_stop_sound.png"
            onclick="stopTourSounds();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicsoundsOffTip"
            />




    <layer name="controlBar_classicbtn_autorotate_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_autorotation.png"
            onclick="resumeautorotation();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicautorotateOnTip"
            />
    <layer name="controlBar_classicbtn_autorotate_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_stop_autorotation.png"
            onclick="pauseautorotation();
"
            style="controlBar_classic_btn_style"
            visible="false"
            tooltip="controlBar_classicautorotateOffTip"
            />





    <layer name="controlBar_classicbtn_hidecontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_controls.png"
            style="controlBar_classic_btn_style"
            onclick="controlBar_classichideMenuControls();hideTourControls();
"
            visible="false"
            tooltip="controlBar_classichideControlsTip"
            />
    <layer name="controlBar_classicbtn_showcontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_show_controls.png"
            style="controlBar_classic_btn_style"
            onclick="controlBar_classicshowMenuControls();showTourControls();
"
            tooltip="controlBar_classicdisplayControlsTip"
            visible="false"
            />
  </layer>





  <action name="controlBar_classichideMenuControls">
    set(controlBar_classicIsOpened, false);
    set(layer[controlBar_classicbtn_hidecontrols].visible, false);
    set(layer[controlBar_classicbtn_showcontrols].visible, true);

    controlBar_classicupdateSoundButtons();

    controlBar_classicupdateAutorotationButtons();


    set(layer[controlBar_classicbtn_up].visible  , false);
    set(layer[controlBar_classicbtn_down].visible, false);
    set(layer[controlBar_classicbtn_right].visible, false);
    set(layer[controlBar_classicbtn_left].visible , false);
    set(layer[controlBar_classicbtn_in].visible , false);
    set(layer[controlBar_classicbtn_out].visible, false);






    if(controlBar_classicbackgroundwidthwhenclosed == 0,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, false);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, false);
    ,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, true);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, true);
    );
    tween(layer[controlBar_classicmenu_controlbar_bg_img].width,get(controlBar_classicbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[controlBar_classicmenu_controlbar_bg].width,get(controlBar_classicbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[controlBar_classicmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
  </action>
  <action name="controlBar_classicshowMenuControls">
    set(controlBar_classicIsOpened, true);
    set(layer[controlBar_classicbtn_hidecontrols].visible, true);
    set(layer[controlBar_classicbtn_showcontrols].visible, false);
    if(controlBar_classicbackgroundwidthwhenopened == 0,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, false);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, false);
    ,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, true);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, true);
    );
    tween(layer[controlBar_classicmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
    controlBar_classicshowMenuButtons();


      tween(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
      tween(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);


  </action>
  <action name="controlBar_classicshowMenuButtons">
    if (device.desktop,
    set(layer[controlBar_classicbtn_up].visible  , true);
    set(layer[controlBar_classicbtn_down].visible, true);
    );
    if (device.desktop,
    set(layer[controlBar_classicbtn_right].visible, true);
    set(layer[controlBar_classicbtn_left].visible , true);
    );
    if (device.desktop,
    set(layer[controlBar_classicbtn_in].visible , true);
    set(layer[controlBar_classicbtn_out].visible, true);
    );







    controlBar_classicupdateSoundButtons();

    controlBar_classicupdateAutorotationButtons();


  </action>



	<events name="controlBar_classicAutorotationEvents"
		onstartautorotation="controlBar_classicupdateAutorotationButtons();"
		onresumeautorotation="controlBar_classicupdateAutorotationButtons();"
		onstopautorotation="controlBar_classicupdateAutorotationButtons();"
		onpauseautorotation="controlBar_classicupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_classicHideAutorotationButtons">
		set(layer[controlBar_classicbtn_autorotate_off].visible, false);
		set(layer[controlBar_classicbtn_autorotate_on].visible , false);
	</action>
	<action name="controlBar_classicShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_classicbtn_autorotate_off].visible, false);
			set(layer[controlBar_classicbtn_autorotate_on].visible , true);
		,
			set(layer[controlBar_classicbtn_autorotate_off].visible, true);
			set(layer[controlBar_classicbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="controlBar_classicupdateAutorotationButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowAutorotationButtons();
		,
			controlBar_classicHideAutorotationButtons();
		);
	</action>


	<events name="controlBar_classicplaystopsoundsevent" 
		playtoursoundsevent="controlBar_classicupdateSoundButtons();" 
		stoptoursoundsevent="controlBar_classicupdateSoundButtons();" 
		keep="true" />
	<action name="controlBar_classicHideSoundButtons">
		set(layer[controlBar_classicbtn_sound_off].visible, false);
		set(layer[controlBar_classicbtn_sound_on].visible , false);
	</action>
	<action name="controlBar_classicShowSoundButtons">
		if (tour_soundson == false,
			set(layer[controlBar_classicbtn_sound_off].visible, false);
			set(layer[controlBar_classicbtn_sound_on].visible , true);
		,
			set(layer[controlBar_classicbtn_sound_off].visible, true);
			set(layer[controlBar_classicbtn_sound_on].visible , false);
		);
	</action>
	<action name="controlBar_classicupdateSoundButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowSoundButtons();
		,
			controlBar_classicHideSoundButtons();
		);
	</action>



<layer name="controlBar_classicmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	txtshadow="1.0 1.0 4.0 0x000000 1"
	css="color:#e6e6e6;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	visible="false"
	html=""
	padding="2"
	xoffset="0"
	yoffset="0"
	edge="bottom"
	/>



<!-- ********** -->
<!-- Logo -->
<!-- id : logo -->
<!-- ********** -->


  <layer align="bottomright"
         x="5"
         y="5"
         zorder="5"
         name="logo"
         keep="true"
         visible="false"
         capture="false"

			tooltip="logotooltipText"
			onhover="showTooltip('plugin');"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/logo_cndp_v.png" 
         onclick="
getmessage(urltoopen,logowebsiteurl);openurl(get(urltoopen),_blank);
"

         height="60"
         width="60"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    hidetourcontrols="hidelogo();"
    showtourcontrols="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
    if (tour_displaycontrols,
      set(layer[logo].visible, true);
    );
  </action>





<!-- ********** -->
<!-- Tournoi d&#39;eloquence boutton -->
<!-- id : buttonForASinglePano -->
<!-- ********** -->

  <layer name="buttonForASinglePano"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano/tournoi_d_e769loquence_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="6"
         visible="false"
         onclick="buttonForASinglePanoOnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePanoOnClick">getmessage(urltoopen,buttonForASinglePanoonclick102647openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePanoevents"
    onTourStart="showbuttonForASinglePano();"
    hidetourcontrols="hidebuttonForASinglePano();"
    showtourcontrols="showbuttonForASinglePano();"

    onPanoStart="showbuttonForASinglePano();"

    keep="true" />
  <action name="hidebuttonForASinglePano">set(layer[buttonForASinglePano].visible, false);</action>
  <action name="showbuttonForASinglePano">
    set(display_buttonForASinglePano, false);
    if(tour_displaycontrols,


    if (xml.scene == pano20, set(display_buttonForASinglePano, true); );


    );
    if (display_buttonForASinglePano,
      set(layer[buttonForASinglePano].visible, true);
    ,
      hidebuttonForASinglePano();
    );
  </action>



<!-- ********** -->
<!-- Extras muros Boutton -->
<!-- id : buttonForASinglePano1 -->
<!-- ********** -->

  <layer name="buttonForASinglePano1"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano1/extra_muros_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="7"
         visible="false"
         onclick="buttonForASinglePano1OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano1OnClick">getmessage(urltoopen,buttonForASinglePano1onclick102971openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano1events"
    onTourStart="showbuttonForASinglePano1();"
    hidetourcontrols="hidebuttonForASinglePano1();"
    showtourcontrols="showbuttonForASinglePano1();"

    onPanoStart="showbuttonForASinglePano1();"

    keep="true" />
  <action name="hidebuttonForASinglePano1">set(layer[buttonForASinglePano1].visible, false);</action>
  <action name="showbuttonForASinglePano1">
    set(display_buttonForASinglePano1, false);
    if(tour_displaycontrols,


    if (xml.scene == pano12, set(display_buttonForASinglePano1, true); );


    );
    if (display_buttonForASinglePano1,
      set(layer[buttonForASinglePano1].visible, true);
    ,
      hidebuttonForASinglePano1();
    );
  </action>



<!-- ********** -->
<!-- Nouveau Batiment boutton -->
<!-- id : buttonForASinglePano2 -->
<!-- ********** -->

  <layer name="buttonForASinglePano2"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano2/nouveau_batiment_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="8"
         visible="false"
         onclick="buttonForASinglePano2OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano2OnClick">getmessage(urltoopen,buttonForASinglePano2onclick102827openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano2events"
    onTourStart="showbuttonForASinglePano2();"
    hidetourcontrols="hidebuttonForASinglePano2();"
    showtourcontrols="showbuttonForASinglePano2();"

    onPanoStart="showbuttonForASinglePano2();"

    keep="true" />
  <action name="hidebuttonForASinglePano2">set(layer[buttonForASinglePano2].visible, false);</action>
  <action name="showbuttonForASinglePano2">
    set(display_buttonForASinglePano2, false);
    if(tour_displaycontrols,


    if (xml.scene == pano58, set(display_buttonForASinglePano2, true); );


    );
    if (display_buttonForASinglePano2,
      set(layer[buttonForASinglePano2].visible, true);
    ,
      hidebuttonForASinglePano2();
    );
  </action>



<!-- ********** -->
<!-- Aide à l&#39;élève boutton -->
<!-- id : buttonForASinglePano3 -->
<!-- ********** -->

  <layer name="buttonForASinglePano3"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano3/aide_a768_l_e769le768ve_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="9"
         visible="false"
         onclick="buttonForASinglePano3OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano3OnClick">getmessage(urltoopen,buttonForASinglePano3onclick102196openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano3events"
    onTourStart="showbuttonForASinglePano3();"
    hidetourcontrols="hidebuttonForASinglePano3();"
    showtourcontrols="showbuttonForASinglePano3();"

    onPanoStart="showbuttonForASinglePano3();"

    keep="true" />
  <action name="hidebuttonForASinglePano3">set(layer[buttonForASinglePano3].visible, false);</action>
  <action name="showbuttonForASinglePano3">
    set(display_buttonForASinglePano3, false);
    if(tour_displaycontrols,


    if (xml.scene == pano50, set(display_buttonForASinglePano3, true); );


    );
    if (display_buttonForASinglePano3,
      set(layer[buttonForASinglePano3].visible, true);
    ,
      hidebuttonForASinglePano3();
    );
  </action>



<!-- ********** -->
<!-- Inscriptions Boutton -->
<!-- id : buttonForASinglePano4 -->
<!-- ********** -->

  <layer name="buttonForASinglePano4"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano4/inscriptions_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="10"
         visible="false"
         onclick="buttonForASinglePano4OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano4OnClick">getmessage(urltoopen,buttonForASinglePano4onclick102895openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano4events"
    onTourStart="showbuttonForASinglePano4();"
    hidetourcontrols="hidebuttonForASinglePano4();"
    showtourcontrols="showbuttonForASinglePano4();"

    onPanoStart="showbuttonForASinglePano4();"

    keep="true" />
  <action name="hidebuttonForASinglePano4">set(layer[buttonForASinglePano4].visible, false);</action>
  <action name="showbuttonForASinglePano4">
    set(display_buttonForASinglePano4, false);
    if(tour_displaycontrols,


    if (xml.scene == pano206, set(display_buttonForASinglePano4, true); );


    );
    if (display_buttonForASinglePano4,
      set(layer[buttonForASinglePano4].visible, true);
    ,
      hidebuttonForASinglePano4();
    );
  </action>



<!-- ********** -->
<!-- PPE boutton -->
<!-- id : buttonForASinglePano5 -->
<!-- ********** -->

  <layer name="buttonForASinglePano5"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano5/ppe_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="11"
         visible="false"
         onclick="buttonForASinglePano5OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano5OnClick">getmessage(urltoopen,buttonForASinglePano5onclick102469openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano5events"
    onTourStart="showbuttonForASinglePano5();"
    hidetourcontrols="hidebuttonForASinglePano5();"
    showtourcontrols="showbuttonForASinglePano5();"

    onPanoStart="showbuttonForASinglePano5();"

    keep="true" />
  <action name="hidebuttonForASinglePano5">set(layer[buttonForASinglePano5].visible, false);</action>
  <action name="showbuttonForASinglePano5">
    set(display_buttonForASinglePano5, false);
    if(tour_displaycontrols,


    if (xml.scene == pano231, set(display_buttonForASinglePano5, true); );


    );
    if (display_buttonForASinglePano5,
      set(layer[buttonForASinglePano5].visible, true);
    ,
      hidebuttonForASinglePano5();
    );
  </action>



<!-- ********** -->
<!-- école jésuite boutton -->
<!-- id : buttonForASinglePano6 -->
<!-- ********** -->

  <layer name="buttonForASinglePano6"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano6/ecole_jesuite_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="12"
         visible="false"
         onclick="buttonForASinglePano6OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano6OnClick">getmessage(urltoopen,buttonForASinglePano6onclick102570openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano6events"
    onTourStart="showbuttonForASinglePano6();"
    hidetourcontrols="hidebuttonForASinglePano6();"
    showtourcontrols="showbuttonForASinglePano6();"

    onPanoStart="showbuttonForASinglePano6();"

    keep="true" />
  <action name="hidebuttonForASinglePano6">set(layer[buttonForASinglePano6].visible, false);</action>
  <action name="showbuttonForASinglePano6">
    set(display_buttonForASinglePano6, false);
    if(tour_displaycontrols,


    if (xml.scene == pano178, set(display_buttonForASinglePano6, true); );


    );
    if (display_buttonForASinglePano6,
      set(layer[buttonForASinglePano6].visible, true);
    ,
      hidebuttonForASinglePano6();
    );
  </action>



<!-- ********** -->
<!-- section TQ -->
<!-- id : buttonForASinglePano7 -->
<!-- ********** -->

  <layer name="buttonForASinglePano7"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano7/section_tq_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="13"
         visible="false"
         onclick="buttonForASinglePano7OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano7OnClick">getmessage(urltoopen,buttonForASinglePano7onclick10241openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano7events"
    onTourStart="showbuttonForASinglePano7();"
    hidetourcontrols="hidebuttonForASinglePano7();"
    showtourcontrols="showbuttonForASinglePano7();"

    onPanoStart="showbuttonForASinglePano7();"

    keep="true" />
  <action name="hidebuttonForASinglePano7">set(layer[buttonForASinglePano7].visible, false);</action>
  <action name="showbuttonForASinglePano7">
    set(display_buttonForASinglePano7, false);
    if(tour_displaycontrols,


    if (xml.scene == pano208, set(display_buttonForASinglePano7, true); );


    );
    if (display_buttonForASinglePano7,
      set(layer[buttonForASinglePano7].visible, true);
    ,
      hidebuttonForASinglePano7();
    );
  </action>



<!-- ********** -->
<!-- Cours et options boutton -->
<!-- id : buttonForASinglePano8 -->
<!-- ********** -->

  <layer name="buttonForASinglePano8"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano8/cours_et_options_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="14"
         visible="false"
         onclick="buttonForASinglePano8OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano8OnClick">getmessage(urltoopen,buttonForASinglePano8onclick10297openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano8events"
    onTourStart="showbuttonForASinglePano8();"
    hidetourcontrols="hidebuttonForASinglePano8();"
    showtourcontrols="showbuttonForASinglePano8();"

    onPanoStart="showbuttonForASinglePano8();"

    keep="true" />
  <action name="hidebuttonForASinglePano8">set(layer[buttonForASinglePano8].visible, false);</action>
  <action name="showbuttonForASinglePano8">
    set(display_buttonForASinglePano8, false);
    if(tour_displaycontrols,


    if (xml.scene == pano229, set(display_buttonForASinglePano8, true); );


    );
    if (display_buttonForASinglePano8,
      set(layer[buttonForASinglePano8].visible, true);
    ,
      hidebuttonForASinglePano8();
    );
  </action>



<!-- ********** -->
<!-- Pièce des rhétos boutton -->
<!-- id : buttonForASinglePano9 -->
<!-- ********** -->

  <layer name="buttonForASinglePano9"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano9/piece_des_rhetos_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="15"
         visible="false"
         onclick="buttonForASinglePano9OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano9OnClick">getmessage(urltoopen,buttonForASinglePano9onclick10297openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano9events"
    onTourStart="showbuttonForASinglePano9();"
    hidetourcontrols="hidebuttonForASinglePano9();"
    showtourcontrols="showbuttonForASinglePano9();"

    onPanoStart="showbuttonForASinglePano9();"

    keep="true" />
  <action name="hidebuttonForASinglePano9">set(layer[buttonForASinglePano9].visible, false);</action>
  <action name="showbuttonForASinglePano9">
    set(display_buttonForASinglePano9, false);
    if(tour_displaycontrols,


    if (xml.scene == pano46, set(display_buttonForASinglePano9, true); );


    );
    if (display_buttonForASinglePano9,
      set(layer[buttonForASinglePano9].visible, true);
    ,
      hidebuttonForASinglePano9();
    );
  </action>



<!-- ********** -->
<!-- Contact boutton -->
<!-- id : buttonForASinglePano10 -->
<!-- ********** -->

  <layer name="buttonForASinglePano10"
         keep="true"
         url="%FIRSTXML%/graphics/buttonforasinglepano10/contact_boutton.png"
         align="top"
         x="10"
         y="10"
         zorder="16"
         visible="false"
         onclick="buttonForASinglePano10OnClick"
         onout="tween(scale, 1.0,0.5,easeOutQuad);"
         onover="tween(scale, 1.2,0.5,easeOutQuad);"
         height="100"
         width="200"
         />



  <action name="buttonForASinglePano10OnClick">getmessage(urltoopen,buttonForASinglePano10onclick102650openurlwebsiteurl);openurl(get(urltoopen),_blank);


  </action>

  <events name="buttonForASinglePano10events"
    onTourStart="showbuttonForASinglePano10();"
    hidetourcontrols="hidebuttonForASinglePano10();"
    showtourcontrols="showbuttonForASinglePano10();"

    onPanoStart="showbuttonForASinglePano10();"

    keep="true" />
  <action name="hidebuttonForASinglePano10">set(layer[buttonForASinglePano10].visible, false);</action>
  <action name="showbuttonForASinglePano10">
    set(display_buttonForASinglePano10, false);
    if(tour_displaycontrols,


    if (xml.scene == pano180, set(display_buttonForASinglePano10, true); );


    );
    if (display_buttonForASinglePano10,
      set(layer[buttonForASinglePano10].visible, true);
    ,
      hidebuttonForASinglePano10();
    );
  </action>



<!-- ********** -->
<!-- Circles Control Bar -->
<!-- id : CirclesControlBar -->
<!-- ********** -->

  <krpano CirclesControlBarbarbuilt="false" CirclesControlBarbackgroundwidthwhenclosed="0" CirclesControlBarbackgroundwidthwhenopened="0" CirclesControlBarIsOpened="false" />
  <events name="CirclesControlBarevents" 
    onxmlcomplete="CirclesControlBarbuildMenuBar();" 


    keep="true" />



  <action name="CirclesControlBarbuildMenuBar">
    ifnot (CirclesControlBarbarbuilt, CirclesControlBarbuildMenu(); set(CirclesControlBarbarbuilt, true););
  </action>

  <style name="CirclesControlBar_btn_style"
         keep="true"
         edge="top"
         align="top"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', CirclesControlBarmenuTooltipStyle, right);"
         onout="hideTooltip();"
         />
  <style name="CirclesControlBar_btn_style_off"
         keep="true"
         edge="top"
         align="top"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', CirclesControlBarmenuTooltipStyle, right);"
         onout="hideTooltip();"
         />

  <layer name="CirclesControlBar_menu_bg"
         keep="true"
         type="container"
         zorder="17"
         width="40"
         height="40"
         align="topright"
         x="40" y="20"
         maskchildren="true"
         rotate="0"
         visible="false"
         >








    <layer name="CirclesControlBarbtn_display_help"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_help.png"
            onclick="CirclesControlBardisplayHelp();"
            style="CirclesControlBar_btn_style"
            devices="desktop"
            visible="false"
            tooltip="CirclesControlBardisplayHelpTip"
            />
    <layer name="CirclesControlBarbtn_close_help"
            url="%FIRSTXML%/graphics/circlescontrolbar/btn_help.png"
            onclick="CirclesControlBarcloseHelp();"
            style="CirclesControlBar_btn_style"
            visible="false"
            devices="desktop"
            tooltip="CirclesControlBarhideHelpTip"
            />



 </layer>





	<events name="CirclesControlBarhideshowcontrolsevent" 
		hidetourcontrols="CirclesControlBarhideMenuControls();" 
		showtourcontrols="CirclesControlBarshowMenuControls();" 
		keep="true" />

  <action name="CirclesControlBarhideMenuControls">
    set(CirclesControlBarIsOpened, false);


	CirclesControlBarupdateHelpButtons();








	set(layer[CirclesControlBar_menu_bg].height, get(CirclesControlBarbackgroundwidthwhenclosed));

	set(layer[CirclesControlBar_menu_bg].visible, true);
	set(layer[CirclesControlBar_menu_bg].alpha, 0.0);
  </action>
  <action name="CirclesControlBarshowMenuControls">
    set(CirclesControlBarIsOpened, true);
	set(layer[CirclesControlBar_menu_bg].visible, true);
	set(layer[CirclesControlBar_menu_bg].alpha, 1.0);


	CirclesControlBarupdateHelpButtons();







    set(layer[CirclesControlBar_menu_bg].height, get(CirclesControlBarbackgroundwidthwhenopened));
  </action>

  <layer name="CirclesControlBarhelpScreenBg"
         align="center"
         keep="true"
         onclick="CirclesControlBarcloseHelp();"
         url="%FIRSTXML%/graphics/circlescontrolbar/help_screen_bg.png"
         visible="false"
         rotate="-90"
         height="50%"
         width="prop"
         zorder="97"
         x="100%" />
  <layer name="CirclesControlBarhelpScreenFg"
         align="center"
         keep="true"
         onclick="CirclesControlBarcloseHelp();"
         url="%FIRSTXML%/graphics/circlescontrolbar/help_screen_fg.png"
         height="50%"
         width="prop"
         visible="false"
         rotate="90"
         zorder="98"
         x="-100%"
         displayed="false" />
  <action name="CirclesControlBardisplayHelp">
  if (device.desktop,
    set(layer[CirclesControlBarhelpScreenFg].displayed,true);
    set(layer[CirclesControlBarhelpScreenBg].visible,true);
    set(layer[CirclesControlBarhelpScreenFg].visible,true);
    tween(layer[CirclesControlBarhelpScreenFg].rotate,0, 1);
    tween(layer[CirclesControlBarhelpScreenFg].x,0, 1);
    tween(layer[CirclesControlBarhelpScreenBg].rotate,0, 1);
    tween(layer[CirclesControlBarhelpScreenBg].x,0, 1);
    CirclesControlBarupdateHelpButtons();
  );
  </action>
  <action name="CirclesControlBarcloseHelp">
  if (device.desktop,
    set(layer[CirclesControlBarhelpScreenFg].displayed,false);
    tween(layer[CirclesControlBarhelpScreenFg].rotate,  90, 1, easeOutQuad, set(layer[CirclesControlBarhelpScreenFg].visible,false););
    tween(layer[CirclesControlBarhelpScreenFg].x, -100%, 1);
    tween(layer[CirclesControlBarhelpScreenBg].rotate, -90, 1, easeOutQuad, set(layer[CirclesControlBarhelpScreenBg].visible,false););
    tween(layer[CirclesControlBarhelpScreenBg].x, 100%, 1);
    CirclesControlBarupdateHelpButtons();
  );
  </action>
	<action name="CirclesControlBarHideHelpButtons">
		set(layer[CirclesControlBarbtn_display_help].visible, false);
		set(layer[CirclesControlBarbtn_close_help].visible, false);
	</action>
	<action name="CirclesControlBarShowHelpButtons">
		if (layer[CirclesControlBarhelpScreenFg].displayed,
			set(layer[CirclesControlBarbtn_close_help].visible, true);
			set(layer[CirclesControlBarbtn_display_help].visible, false);
		,
			set(layer[CirclesControlBarbtn_display_help].visible, true);
			set(layer[CirclesControlBarbtn_close_help].visible, false);
		);
	</action>
	<action name="CirclesControlBarupdateHelpButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			CirclesControlBarShowHelpButtons();
		,
			CirclesControlBarHideHelpButtons();
		);
	,
		CirclesControlBarHideHelpButtons();
	);
	</action>






<layer name="CirclesControlBarmenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#ffffff;font-family:Helvetica;font-size:12px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="right"
/>
  <action name="CirclesControlBarbuildMenu">
    
    set(CirclesControlBarbutton_pos, 0);



      if (device.desktop,
        set(layer[CirclesControlBarbtn_display_help].y, get(CirclesControlBarbutton_pos));
        set(layer[CirclesControlBarbtn_close_help].y  , get(CirclesControlBarbutton_pos));
        inc(CirclesControlBarbutton_pos, 45);
      );











      dec(CirclesControlBarbutton_pos, 5);

      set(CirclesControlBarbackgroundwidthwhenopened, get(CirclesControlBarbutton_pos));


    
      set(layer[CirclesControlBar_menu_bg].height, get(CirclesControlBarbackgroundwidthwhenopened));
	
	
	
    </action>

	<events name="CirclesControlBarStartTourEvents" onTourStart="CirclesControlBarCallOnStartTour();" keep="true" />
	
	<action name="CirclesControlBarCallOnStartTour">
		
		showTourControls();

	</action>



<!-- ********** -->
<!-- Boutons Précédent/Suivant -->
<!-- id : prevnexttheme8 -->
<!-- ********** -->

  <style name="prevnexttheme8ArrowStyle" keep="true" x="10" alpha="0.5"
               crop="0| 0|38|38"
         onovercrop="0|38|38|38"
         ondowncrop="0|76|38|38"
         />
  <layer name="prevnexttheme8prevPanoramaArrow" style="prevnexttheme8ArrowStyle"
         url="%FIRSTXML%/graphics/prevnextdots/btn_scroll_left.png" align="left" 
         tooltip="prevnexttheme8prevSceneTip"
         onhover="set(alpha, 1);showTooltip('plugin',prevnexttheme8TooltipStyle,left);"
         onout="set(alpha, 0.5);hideTooltip();"
         onclick="loadPreviousScene();
"
         visible="false"
         zorder="18" />

  <layer name="prevnexttheme8nextPanoramaArrow" style="prevnexttheme8ArrowStyle"
         url="%FIRSTXML%/graphics/prevnextdots/btn_scroll_right.png" align="right"
         tooltip="prevnexttheme8nextSceneTip"
         onhover="set(alpha, 1);showTooltip('plugin',prevnexttheme8TooltipStyle,right);"
         onout="set(alpha, 0.5);hideTooltip();"
         onclick="loadNextScene();
"
         visible="false"
         zorder="18" />

  <events name="prevnexttheme8hideshowcontrolsevent" 
    onTourStart="prevnexttheme8showPrevNextControls();"
    keep="true"/>
  <action name="prevnexttheme8hidePrevNextControls">
    set(layer[prevnexttheme8prevPanoramaArrow].visible, false);
    set(layer[prevnexttheme8nextPanoramaArrow].visible, false);
  </action>
  <action name="prevnexttheme8showPrevNextControls">
    set(layer[prevnexttheme8prevPanoramaArrow].visible, true);
    set(layer[prevnexttheme8nextPanoramaArrow].visible, true);
  </action>

<layer name="prevnexttheme8TooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	type="text"
	align="center"
	bg="false"
	bgborder="0"
	css="color:#ffffff;font-family:Arial;font-size:12px;text-align:left;"
	interactivecontent="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
/>

<!-- ********** -->
<!-- Circles Control Bar1 -->
<!-- id : CirclesControlBar1 -->
<!-- ********** -->

  <krpano CirclesControlBar1barbuilt="false" CirclesControlBar1backgroundwidthwhenclosed="0" CirclesControlBar1backgroundwidthwhenopened="0" CirclesControlBar1IsOpened="false" />
  <events name="CirclesControlBar1events" 
    onxmlcomplete="CirclesControlBar1buildMenuBar();" 


    keep="true" />



  <action name="CirclesControlBar1buildMenuBar">
    ifnot (CirclesControlBar1barbuilt, CirclesControlBar1buildMenu(); set(CirclesControlBar1barbuilt, true););
  </action>

  <style name="CirclesControlBar1_btn_style"
         keep="true"
         edge="top"
         align="top"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         onhover="showTooltip('plugin', CirclesControlBar1menuTooltipStyle, left);"
         onout="hideTooltip();"
         />
  <style name="CirclesControlBar1_btn_style_off"
         keep="true"
         edge="top"
         align="top"
         x="0" y="0"
         width="40" height="40"
         onhover="showTooltip('plugin', CirclesControlBar1menuTooltipStyle, left);"
         onout="hideTooltip();"
         />

  <layer name="CirclesControlBar1_menu_bg"
         keep="true"
         type="container"
         zorder="19"
         width="40"
         height="40"
         align="topleft"
         x="40" y="20"
         maskchildren="true"
         rotate="0"
         visible="false"
         >






    <layer name="CirclesControlBar1btn_openfs"
            url="%FIRSTXML%/graphics/circlescontrolbar1/btn_enter_fs.png"
            onclick="enterFullscreen();
"
            style="CirclesControlBar1_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="CirclesControlBar1openFsTip"
            />
    <layer name="CirclesControlBar1btn_closefs"
            url="%FIRSTXML%/graphics/circlescontrolbar1/btn_close_fs.png"
            onclick="exitFullscreen();
"
            style="CirclesControlBar1_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="CirclesControlBar1closeFsTip"
            />





 </layer>





	<events name="CirclesControlBar1hideshowcontrolsevent" 
		hidetourcontrols="CirclesControlBar1hideMenuControls();" 
		showtourcontrols="CirclesControlBar1showMenuControls();" 
		keep="true" />

  <action name="CirclesControlBar1hideMenuControls">
    set(CirclesControlBar1IsOpened, false);


	CirclesControlBar1updateFullscreenButtons();








	set(layer[CirclesControlBar1_menu_bg].height, get(CirclesControlBar1backgroundwidthwhenclosed));

	set(layer[CirclesControlBar1_menu_bg].visible, true);
	set(layer[CirclesControlBar1_menu_bg].alpha, 0.0);
  </action>
  <action name="CirclesControlBar1showMenuControls">
    set(CirclesControlBar1IsOpened, true);
	set(layer[CirclesControlBar1_menu_bg].visible, true);
	set(layer[CirclesControlBar1_menu_bg].alpha, 1.0);


	CirclesControlBar1updateFullscreenButtons();







    set(layer[CirclesControlBar1_menu_bg].height, get(CirclesControlBar1backgroundwidthwhenopened));
  </action>




  <events name="CirclesControlBar1menufullscreenchangeevent"
          onenterfullscreen="CirclesControlBar1updateFullscreenButtons();"
          onexitfullscreen="CirclesControlBar1updateFullscreenButtons();"
          keep="true"/>
	<action name="CirclesControlBar1HideFullscreenButtons">
		set(layer[CirclesControlBar1btn_openfs].visible , false);
		set(layer[CirclesControlBar1btn_closefs].visible, false);
	</action>
	<action name="CirclesControlBar1ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[CirclesControlBar1btn_openfs].visible , false);
				set(layer[CirclesControlBar1btn_closefs].visible, true);
			,
				set(layer[CirclesControlBar1btn_openfs].visible ,true);
				set(layer[CirclesControlBar1btn_closefs].visible,false);
			);
		,
			CirclesControlBar1HideFullscreenButtons();
		);
	</action>
	<action name="CirclesControlBar1updateFullscreenButtons">
		if (tour_displaycontrols,
			CirclesControlBar1ShowFullscreenButtons();
		,
			CirclesControlBar1HideFullscreenButtons();
		);
	</action>



<layer name="CirclesControlBar1menuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#ffffff;font-family:Helvetica;font-size:12px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	xoffset="0"
	yoffset="0"
	padding="2"
	selectable="false"
	zorder="0"
	visible="false"
	html=""
	edge="left"
/>
  <action name="CirclesControlBar1buildMenu">
    
    set(CirclesControlBar1button_pos, 0);



      if (device.fullscreensupport,
        set(layer[CirclesControlBar1btn_openfs].y , get(CirclesControlBar1button_pos));
        set(layer[CirclesControlBar1btn_closefs].y, get(CirclesControlBar1button_pos));
        inc(CirclesControlBar1button_pos, 45);
      );











      dec(CirclesControlBar1button_pos, 5);

      set(CirclesControlBar1backgroundwidthwhenopened, get(CirclesControlBar1button_pos));


    
      set(layer[CirclesControlBar1_menu_bg].height, get(CirclesControlBar1backgroundwidthwhenopened));
	
	
	
    </action>

	<events name="CirclesControlBar1StartTourEvents" onTourStart="CirclesControlBar1CallOnStartTour();" keep="true" />
	
	<action name="CirclesControlBar1CallOnStartTour">
		
		showTourControls();

	</action>



  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url.flash="%SWFPATH%/graphics/soundinterface.swf"
          url.html5="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          bgsoundtoforce = "false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            set(plugin[soundinterface].bgsoundtoforce, false);
            if(scene[get(xml.scene)].video == false OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
           ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsoundtoforce, true);
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            ,

              if(device.mobile OR device.tablet OR device.safari OR device.chrome,
                resumesound(bgsoundname);
                set(plugin[soundinterface].bgsoundpaused, false);
              );
            );
          ,
            if(((plugin[soundinterface].bgsoundpaused == true OR plugin[soundinterface].bgsoundtoforce == true) AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              set(plugin[soundinterface].bgsound, true);
              set(plugin[soundinterface].bgsoundpaused, false);
              set(plugin[soundinterface].bgsoundloopended, false);
              set(plugin[soundinterface].bgsoundtoforce, false);
              if(plugin[soundinterface].backgroundsoundloops GT 0,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
              ,
                playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
              );
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("parking_colle768ge.mp3");
    preloadsound("forum_colle768ge.mp3");
    preloadsound("kiosque_colle768ge.mp3");
    preloadsound("bibliothe768que_colle768ge.mp3");
    preloadsound("salle_audio_colle768ge.mp3");
    preloadsound("local_science_bas_colle768ge.mp3");
    preloadsound("local_informatique_colle768ge.mp3");
    preloadsound("centre_des_4eme_colle768ge.mp3");
    preloadsound("labo_science_haut.mp3");
    preloadsound("chapelle_colle768ge.mp3");
    preloadsound("salle_d_e769tude_colle768ge.mp3");
    preloadsound("centre_des_4eme.mp3");
    preloadsound("terrains_exte769rieurs.mp3");
    preloadsound("salle_de_sport.mp3");
    preloadsound("batiment_1eres.mp3");
    preloadsound("couloir_premie768re_colle768ge.mp3");
    preloadsound("classe_premie768re_colle768ge.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          ,

            if(device.mobile OR device.tablet OR device.safari OR device.chrome,
              set(tour_current_played_sound_paused, false);
              resumesound(get(tour_current_played_sound));
            );
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          if(device.flash OR (device.webgl AND !device.ios),
            div(volume, tour_soundsvolume, 100);
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            ,
              if(tour_soundsvolume GT 0,
                set(layer[displayedStandardVideo].muted, false);
              ,
                set(layer[displayedStandardVideo].muted, true);
              );
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            ,
              set(layer[displayedStandardVideo].muted, true);
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        ,
          set(layer[displayedStandardVideo].muted, true);
        );
      );
    );
  </action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

</krpano>